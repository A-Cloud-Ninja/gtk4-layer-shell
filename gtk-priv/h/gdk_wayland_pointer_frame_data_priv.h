/* AUTOGENERATED, DO NOT EDIT DIRECTLY
 * See gtk-priv/README.md for more information
 *
 * This file is part of gtk-layer-shell
 *
 * Copyright (C) 2009 Carlos Garnacho <carlosg@gnome.org>
 * Copyright Â© 2023 gtk-priv/scripts/code.py
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */

#ifndef GDK_WAYLAND_POINTER_FRAME_DATA_PRIV_H
#define GDK_WAYLAND_POINTER_FRAME_DATA_PRIV_H

#include "common.h"

typedef struct _GdkWaylandPointerFrameData GdkWaylandPointerFrameData;

// Version ID 0
// Valid for GTK master
struct _GdkWaylandPointerFrameData_v3_0_0
{
  GdkEvent *event;
  double delta_x;
  double delta_y;
  int32_t discrete_x;
  int32_t discrete_y;
  gint8 is_scroll_stop;
  enum wl_pointer_axis_source source;
};

// For internal use only
int gdk_wayland_pointer_frame_data_priv_get_version_id() {
  static int version_id = -1;
  
  if (version_id == -1) {
    gtk_priv_assert_gtk_version_valid();
    int combo = gtk_get_minor_version() * 1000 + gtk_get_micro_version();
  
    switch (combo) {
        break;
  
      default:
        gtk_priv_warn_gtk_version_may_be_unsupported();
    }
  
    {
      version_id = 0;
    }
  }
  
  return version_id;
}

// GdkWaylandPointerFrameData::event

GdkEvent * gdk_wayland_pointer_frame_data_priv_get_event(GdkWaylandPointerFrameData * self) {
  switch (gdk_wayland_pointer_frame_data_priv_get_version_id()) {
    case 0: return ((struct _GdkWaylandPointerFrameData_v3_0_0*)self)->event;
    default: g_error("Invalid version ID"); g_abort();
  }
}

void gdk_wayland_pointer_frame_data_priv_set_event(GdkWaylandPointerFrameData * self, GdkEvent * event) {
  switch (gdk_wayland_pointer_frame_data_priv_get_version_id()) {
    case 0: ((struct _GdkWaylandPointerFrameData_v3_0_0*)self)->event = event; break;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandPointerFrameData::delta_x

double gdk_wayland_pointer_frame_data_priv_get_delta_x(GdkWaylandPointerFrameData * self) {
  switch (gdk_wayland_pointer_frame_data_priv_get_version_id()) {
    case 0: return ((struct _GdkWaylandPointerFrameData_v3_0_0*)self)->delta_x;
    default: g_error("Invalid version ID"); g_abort();
  }
}

void gdk_wayland_pointer_frame_data_priv_set_delta_x(GdkWaylandPointerFrameData * self, double delta_x) {
  switch (gdk_wayland_pointer_frame_data_priv_get_version_id()) {
    case 0: ((struct _GdkWaylandPointerFrameData_v3_0_0*)self)->delta_x = delta_x; break;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandPointerFrameData::delta_y

double gdk_wayland_pointer_frame_data_priv_get_delta_y(GdkWaylandPointerFrameData * self) {
  switch (gdk_wayland_pointer_frame_data_priv_get_version_id()) {
    case 0: return ((struct _GdkWaylandPointerFrameData_v3_0_0*)self)->delta_y;
    default: g_error("Invalid version ID"); g_abort();
  }
}

void gdk_wayland_pointer_frame_data_priv_set_delta_y(GdkWaylandPointerFrameData * self, double delta_y) {
  switch (gdk_wayland_pointer_frame_data_priv_get_version_id()) {
    case 0: ((struct _GdkWaylandPointerFrameData_v3_0_0*)self)->delta_y = delta_y; break;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandPointerFrameData::discrete_x

int32_t * gdk_wayland_pointer_frame_data_priv_get_discrete_x_ptr(GdkWaylandPointerFrameData * self) {
  switch (gdk_wayland_pointer_frame_data_priv_get_version_id()) {
    case 0: return (int32_t *)&((struct _GdkWaylandPointerFrameData_v3_0_0*)self)->discrete_x;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandPointerFrameData::discrete_y

int32_t * gdk_wayland_pointer_frame_data_priv_get_discrete_y_ptr(GdkWaylandPointerFrameData * self) {
  switch (gdk_wayland_pointer_frame_data_priv_get_version_id()) {
    case 0: return (int32_t *)&((struct _GdkWaylandPointerFrameData_v3_0_0*)self)->discrete_y;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandPointerFrameData::is_scroll_stop

gint8 * gdk_wayland_pointer_frame_data_priv_get_is_scroll_stop_ptr(GdkWaylandPointerFrameData * self) {
  switch (gdk_wayland_pointer_frame_data_priv_get_version_id()) {
    case 0: return (gint8 *)&((struct _GdkWaylandPointerFrameData_v3_0_0*)self)->is_scroll_stop;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandPointerFrameData::source

enum wl_pointer_axis_source * gdk_wayland_pointer_frame_data_priv_get_source_ptr(GdkWaylandPointerFrameData * self) {
  switch (gdk_wayland_pointer_frame_data_priv_get_version_id()) {
    case 0: return (enum wl_pointer_axis_source *)&((struct _GdkWaylandPointerFrameData_v3_0_0*)self)->source;
    default: g_error("Invalid version ID"); g_abort();
  }
}

#endif // GDK_WAYLAND_POINTER_FRAME_DATA_PRIV_H
