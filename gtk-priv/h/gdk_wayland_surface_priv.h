/* AUTOGENERATED, DO NOT EDIT DIRECTLY
 * See gtk-priv/README.md for more information
 *
 * This file is part of gtk-layer-shell
 *
 * Copyright © 2010 Intel Corporation
 * Copyright © 2023 gtk-priv/scripts/code.py
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */

#ifndef GDK_WAYLAND_SURFACE_PRIV_H
#define GDK_WAYLAND_SURFACE_PRIV_H

#include "common.h"

typedef struct _GdkWaylandSurface GdkWaylandSurface;

// Version ID 0
// Valid for GTK master
struct _GdkWaylandSurface_v3_0_0
{
  struct _GdkSurface_v3_0_0 parent_instance;
  struct {
    GSList *outputs;
    struct wl_surface *wl_surface;
    struct xdg_surface *xdg_surface;
    struct xdg_toplevel *xdg_toplevel;
    struct xdg_popup *xdg_popup;
    struct zxdg_surface_v6 *zxdg_surface_v6;
    struct zxdg_toplevel_v6 *zxdg_toplevel_v6;
    struct zxdg_popup_v6 *zxdg_popup_v6;
    struct gtk_surface1 *gtk_surface;
    struct wl_egl_window *egl_window;
    struct wl_egl_window *dummy_egl_window;
    struct zxdg_exported_v1 *xdg_exported;
    struct org_kde_kwin_server_decoration *server_decoration;
  } display_server;
  struct wl_event_queue *event_queue;
  EGLSurface egl_surface;
  EGLSurface dummy_egl_surface;
  uint32_t reposition_token;
  uint32_t received_reposition_token;
  PopupState popup_state;
  unsigned int initial_configure_received : 1;
  unsigned int has_uncommitted_ack_configure : 1;
  unsigned int mapped : 1;
  unsigned int awaiting_frame : 1;
  unsigned int awaiting_frame_frozen : 1;
  unsigned int is_drag_surface : 1;
  int pending_buffer_offset_x;
  int pending_buffer_offset_y;
  char *title;
  struct {
    gboolean was_set;
    char *application_id;
    char *app_menu_path;
    char *menubar_path;
    char *window_object_path;
    char *application_object_path;
    char *unique_bus_name;
  } application;
  struct _GdkGeometry_v3_0_0 geometry_hints;
  GdkSurfaceHints geometry_mask;
  GdkSeat *grab_input_seat;
  gint64 pending_frame_counter;
  guint32 scale;
  int shadow_left;
  int shadow_right;
  int shadow_top;
  int shadow_bottom;
  gboolean shadow_dirty;
  struct wl_output *initial_fullscreen_output;
  cairo_region_t *opaque_region;
  gboolean opaque_region_dirty;
  cairo_region_t *input_region;
  gboolean input_region_dirty;
  GdkRectangle last_sent_window_geometry;
  int last_sent_min_width;
  int last_sent_min_height;
  int last_sent_max_width;
  int last_sent_max_height;
  int saved_width;
  int saved_height;
  gulong parent_surface_committed_handler;
  struct {
    GdkToplevelLayout *layout;
  } toplevel;
  struct {
    GdkPopupLayout *layout;
    int unconstrained_width;
    int unconstrained_height;
  } popup;
  struct {
    struct {
      int width;
      int height;
      GdkToplevelState state;
      gboolean is_resizing;
    } toplevel;
    struct {
      int x;
      int y;
      int width;
      int height;
      uint32_t repositioned_token;
      gboolean has_repositioned_token;
    } popup;
    gboolean is_initial_configure;
    uint32_t serial;
    gboolean is_dirty;
  } pending;
  struct {
    GdkToplevelState unset_flags;
    GdkToplevelState set_flags;
  } initial_state;
  struct {
    struct {
      gboolean should_constrain;
      gboolean size_is_fixed;
    } toplevel;
    struct {
      int x;
      int y;
    } popup;
    int configured_width;
    int configured_height;
    gboolean surface_geometry_dirty;
  } next_layout;
  uint32_t last_configure_serial;
  int state_freeze_count;
  struct {
    GdkWaylandToplevelExported callback;
    gpointer user_data;
    GDestroyNotify destroy_func;
  } exported;
  struct zxdg_imported_v1 *imported_transient_for;
  GHashTable *shortcuts_inhibitors;
  struct zwp_idle_inhibitor_v1 *idle_inhibitor;
  size_t idle_inhibitor_refcount;
};

// For internal use only
int gdk_wayland_surface_priv_get_version_id() {
  static int version_id = -1;
  
  if (version_id == -1) {
    gtk_priv_assert_gtk_version_valid();
    int combo = gtk_get_minor_version() * 1000 + gtk_get_micro_version();
  
    switch (combo) {
        break;
  
      default:
        gtk_priv_warn_gtk_version_may_be_unsupported();
    }
  
    {
      version_id = 0;
    }
  }
  
  return version_id;
}

// GdkWaylandSurface::parent_instance

GdkSurface * gdk_wayland_surface_priv_get_parent_instance_ptr(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return (GdkSurface *)&((struct _GdkWaylandSurface_v3_0_0*)self)->parent_instance;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::display_server.outputs

GSList * gdk_wayland_surface_priv_get_display_server_outputs(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return ((struct _GdkWaylandSurface_v3_0_0*)self)->display_server.outputs;
    default: g_error("Invalid version ID"); g_abort();
  }
}

void gdk_wayland_surface_priv_set_display_server_outputs(GdkWaylandSurface * self, GSList * display_server_outputs) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: ((struct _GdkWaylandSurface_v3_0_0*)self)->display_server.outputs = display_server_outputs; break;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::display_server.wl_surface

struct wl_surface * gdk_wayland_surface_priv_get_display_server_wl_surface(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return ((struct _GdkWaylandSurface_v3_0_0*)self)->display_server.wl_surface;
    default: g_error("Invalid version ID"); g_abort();
  }
}

void gdk_wayland_surface_priv_set_display_server_wl_surface(GdkWaylandSurface * self, struct wl_surface * display_server_wl_surface) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: ((struct _GdkWaylandSurface_v3_0_0*)self)->display_server.wl_surface = display_server_wl_surface; break;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::display_server.xdg_surface

struct xdg_surface * gdk_wayland_surface_priv_get_display_server_xdg_surface(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return ((struct _GdkWaylandSurface_v3_0_0*)self)->display_server.xdg_surface;
    default: g_error("Invalid version ID"); g_abort();
  }
}

void gdk_wayland_surface_priv_set_display_server_xdg_surface(GdkWaylandSurface * self, struct xdg_surface * display_server_xdg_surface) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: ((struct _GdkWaylandSurface_v3_0_0*)self)->display_server.xdg_surface = display_server_xdg_surface; break;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::display_server.xdg_toplevel

struct xdg_toplevel * gdk_wayland_surface_priv_get_display_server_xdg_toplevel(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return ((struct _GdkWaylandSurface_v3_0_0*)self)->display_server.xdg_toplevel;
    default: g_error("Invalid version ID"); g_abort();
  }
}

void gdk_wayland_surface_priv_set_display_server_xdg_toplevel(GdkWaylandSurface * self, struct xdg_toplevel * display_server_xdg_toplevel) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: ((struct _GdkWaylandSurface_v3_0_0*)self)->display_server.xdg_toplevel = display_server_xdg_toplevel; break;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::display_server.xdg_popup

struct xdg_popup * gdk_wayland_surface_priv_get_display_server_xdg_popup(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return ((struct _GdkWaylandSurface_v3_0_0*)self)->display_server.xdg_popup;
    default: g_error("Invalid version ID"); g_abort();
  }
}

void gdk_wayland_surface_priv_set_display_server_xdg_popup(GdkWaylandSurface * self, struct xdg_popup * display_server_xdg_popup) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: ((struct _GdkWaylandSurface_v3_0_0*)self)->display_server.xdg_popup = display_server_xdg_popup; break;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::display_server.zxdg_surface_v6

struct zxdg_surface_v6 * gdk_wayland_surface_priv_get_display_server_zxdg_surface_v6(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return ((struct _GdkWaylandSurface_v3_0_0*)self)->display_server.zxdg_surface_v6;
    default: g_error("Invalid version ID"); g_abort();
  }
}

void gdk_wayland_surface_priv_set_display_server_zxdg_surface_v6(GdkWaylandSurface * self, struct zxdg_surface_v6 * display_server_zxdg_surface_v6) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: ((struct _GdkWaylandSurface_v3_0_0*)self)->display_server.zxdg_surface_v6 = display_server_zxdg_surface_v6; break;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::display_server.zxdg_toplevel_v6

struct zxdg_toplevel_v6 * gdk_wayland_surface_priv_get_display_server_zxdg_toplevel_v6(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return ((struct _GdkWaylandSurface_v3_0_0*)self)->display_server.zxdg_toplevel_v6;
    default: g_error("Invalid version ID"); g_abort();
  }
}

void gdk_wayland_surface_priv_set_display_server_zxdg_toplevel_v6(GdkWaylandSurface * self, struct zxdg_toplevel_v6 * display_server_zxdg_toplevel_v6) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: ((struct _GdkWaylandSurface_v3_0_0*)self)->display_server.zxdg_toplevel_v6 = display_server_zxdg_toplevel_v6; break;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::display_server.zxdg_popup_v6

struct zxdg_popup_v6 * gdk_wayland_surface_priv_get_display_server_zxdg_popup_v6(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return ((struct _GdkWaylandSurface_v3_0_0*)self)->display_server.zxdg_popup_v6;
    default: g_error("Invalid version ID"); g_abort();
  }
}

void gdk_wayland_surface_priv_set_display_server_zxdg_popup_v6(GdkWaylandSurface * self, struct zxdg_popup_v6 * display_server_zxdg_popup_v6) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: ((struct _GdkWaylandSurface_v3_0_0*)self)->display_server.zxdg_popup_v6 = display_server_zxdg_popup_v6; break;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::display_server.gtk_surface

struct gtk_surface1 * gdk_wayland_surface_priv_get_display_server_gtk_surface(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return ((struct _GdkWaylandSurface_v3_0_0*)self)->display_server.gtk_surface;
    default: g_error("Invalid version ID"); g_abort();
  }
}

void gdk_wayland_surface_priv_set_display_server_gtk_surface(GdkWaylandSurface * self, struct gtk_surface1 * display_server_gtk_surface) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: ((struct _GdkWaylandSurface_v3_0_0*)self)->display_server.gtk_surface = display_server_gtk_surface; break;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::display_server.egl_window

struct wl_egl_window * gdk_wayland_surface_priv_get_display_server_egl_window(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return ((struct _GdkWaylandSurface_v3_0_0*)self)->display_server.egl_window;
    default: g_error("Invalid version ID"); g_abort();
  }
}

void gdk_wayland_surface_priv_set_display_server_egl_window(GdkWaylandSurface * self, struct wl_egl_window * display_server_egl_window) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: ((struct _GdkWaylandSurface_v3_0_0*)self)->display_server.egl_window = display_server_egl_window; break;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::display_server.dummy_egl_window

struct wl_egl_window * gdk_wayland_surface_priv_get_display_server_dummy_egl_window(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return ((struct _GdkWaylandSurface_v3_0_0*)self)->display_server.dummy_egl_window;
    default: g_error("Invalid version ID"); g_abort();
  }
}

void gdk_wayland_surface_priv_set_display_server_dummy_egl_window(GdkWaylandSurface * self, struct wl_egl_window * display_server_dummy_egl_window) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: ((struct _GdkWaylandSurface_v3_0_0*)self)->display_server.dummy_egl_window = display_server_dummy_egl_window; break;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::display_server.xdg_exported

struct zxdg_exported_v1 * gdk_wayland_surface_priv_get_display_server_xdg_exported(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return ((struct _GdkWaylandSurface_v3_0_0*)self)->display_server.xdg_exported;
    default: g_error("Invalid version ID"); g_abort();
  }
}

void gdk_wayland_surface_priv_set_display_server_xdg_exported(GdkWaylandSurface * self, struct zxdg_exported_v1 * display_server_xdg_exported) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: ((struct _GdkWaylandSurface_v3_0_0*)self)->display_server.xdg_exported = display_server_xdg_exported; break;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::display_server.server_decoration

struct org_kde_kwin_server_decoration * gdk_wayland_surface_priv_get_display_server_server_decoration(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return ((struct _GdkWaylandSurface_v3_0_0*)self)->display_server.server_decoration;
    default: g_error("Invalid version ID"); g_abort();
  }
}

void gdk_wayland_surface_priv_set_display_server_server_decoration(GdkWaylandSurface * self, struct org_kde_kwin_server_decoration * display_server_server_decoration) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: ((struct _GdkWaylandSurface_v3_0_0*)self)->display_server.server_decoration = display_server_server_decoration; break;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::event_queue

struct wl_event_queue * gdk_wayland_surface_priv_get_event_queue(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return ((struct _GdkWaylandSurface_v3_0_0*)self)->event_queue;
    default: g_error("Invalid version ID"); g_abort();
  }
}

void gdk_wayland_surface_priv_set_event_queue(GdkWaylandSurface * self, struct wl_event_queue * event_queue) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: ((struct _GdkWaylandSurface_v3_0_0*)self)->event_queue = event_queue; break;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::egl_surface

EGLSurface * gdk_wayland_surface_priv_get_egl_surface_ptr(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return (EGLSurface *)&((struct _GdkWaylandSurface_v3_0_0*)self)->egl_surface;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::dummy_egl_surface

EGLSurface * gdk_wayland_surface_priv_get_dummy_egl_surface_ptr(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return (EGLSurface *)&((struct _GdkWaylandSurface_v3_0_0*)self)->dummy_egl_surface;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::reposition_token

uint32_t gdk_wayland_surface_priv_get_reposition_token(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return ((struct _GdkWaylandSurface_v3_0_0*)self)->reposition_token;
    default: g_error("Invalid version ID"); g_abort();
  }
}

void gdk_wayland_surface_priv_set_reposition_token(GdkWaylandSurface * self, uint32_t reposition_token) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: ((struct _GdkWaylandSurface_v3_0_0*)self)->reposition_token = reposition_token; break;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::received_reposition_token

uint32_t gdk_wayland_surface_priv_get_received_reposition_token(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return ((struct _GdkWaylandSurface_v3_0_0*)self)->received_reposition_token;
    default: g_error("Invalid version ID"); g_abort();
  }
}

void gdk_wayland_surface_priv_set_received_reposition_token(GdkWaylandSurface * self, uint32_t received_reposition_token) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: ((struct _GdkWaylandSurface_v3_0_0*)self)->received_reposition_token = received_reposition_token; break;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::popup_state

PopupState * gdk_wayland_surface_priv_get_popup_state_ptr(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return (PopupState *)&((struct _GdkWaylandSurface_v3_0_0*)self)->popup_state;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::initial_configure_received

unsigned int gdk_wayland_surface_priv_get_initial_configure_received(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return ((struct _GdkWaylandSurface_v3_0_0*)self)->initial_configure_received;
    default: g_error("Invalid version ID"); g_abort();
  }
}

void gdk_wayland_surface_priv_set_initial_configure_received(GdkWaylandSurface * self, unsigned int initial_configure_received) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: ((struct _GdkWaylandSurface_v3_0_0*)self)->initial_configure_received = initial_configure_received; break;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::has_uncommitted_ack_configure

unsigned int gdk_wayland_surface_priv_get_has_uncommitted_ack_configure(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return ((struct _GdkWaylandSurface_v3_0_0*)self)->has_uncommitted_ack_configure;
    default: g_error("Invalid version ID"); g_abort();
  }
}

void gdk_wayland_surface_priv_set_has_uncommitted_ack_configure(GdkWaylandSurface * self, unsigned int has_uncommitted_ack_configure) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: ((struct _GdkWaylandSurface_v3_0_0*)self)->has_uncommitted_ack_configure = has_uncommitted_ack_configure; break;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::mapped

unsigned int gdk_wayland_surface_priv_get_mapped(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return ((struct _GdkWaylandSurface_v3_0_0*)self)->mapped;
    default: g_error("Invalid version ID"); g_abort();
  }
}

void gdk_wayland_surface_priv_set_mapped(GdkWaylandSurface * self, unsigned int mapped) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: ((struct _GdkWaylandSurface_v3_0_0*)self)->mapped = mapped; break;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::awaiting_frame

unsigned int gdk_wayland_surface_priv_get_awaiting_frame(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return ((struct _GdkWaylandSurface_v3_0_0*)self)->awaiting_frame;
    default: g_error("Invalid version ID"); g_abort();
  }
}

void gdk_wayland_surface_priv_set_awaiting_frame(GdkWaylandSurface * self, unsigned int awaiting_frame) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: ((struct _GdkWaylandSurface_v3_0_0*)self)->awaiting_frame = awaiting_frame; break;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::awaiting_frame_frozen

unsigned int gdk_wayland_surface_priv_get_awaiting_frame_frozen(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return ((struct _GdkWaylandSurface_v3_0_0*)self)->awaiting_frame_frozen;
    default: g_error("Invalid version ID"); g_abort();
  }
}

void gdk_wayland_surface_priv_set_awaiting_frame_frozen(GdkWaylandSurface * self, unsigned int awaiting_frame_frozen) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: ((struct _GdkWaylandSurface_v3_0_0*)self)->awaiting_frame_frozen = awaiting_frame_frozen; break;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::is_drag_surface

unsigned int gdk_wayland_surface_priv_get_is_drag_surface(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return ((struct _GdkWaylandSurface_v3_0_0*)self)->is_drag_surface;
    default: g_error("Invalid version ID"); g_abort();
  }
}

void gdk_wayland_surface_priv_set_is_drag_surface(GdkWaylandSurface * self, unsigned int is_drag_surface) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: ((struct _GdkWaylandSurface_v3_0_0*)self)->is_drag_surface = is_drag_surface; break;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::pending_buffer_offset_x

int gdk_wayland_surface_priv_get_pending_buffer_offset_x(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return ((struct _GdkWaylandSurface_v3_0_0*)self)->pending_buffer_offset_x;
    default: g_error("Invalid version ID"); g_abort();
  }
}

void gdk_wayland_surface_priv_set_pending_buffer_offset_x(GdkWaylandSurface * self, int pending_buffer_offset_x) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: ((struct _GdkWaylandSurface_v3_0_0*)self)->pending_buffer_offset_x = pending_buffer_offset_x; break;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::pending_buffer_offset_y

int gdk_wayland_surface_priv_get_pending_buffer_offset_y(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return ((struct _GdkWaylandSurface_v3_0_0*)self)->pending_buffer_offset_y;
    default: g_error("Invalid version ID"); g_abort();
  }
}

void gdk_wayland_surface_priv_set_pending_buffer_offset_y(GdkWaylandSurface * self, int pending_buffer_offset_y) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: ((struct _GdkWaylandSurface_v3_0_0*)self)->pending_buffer_offset_y = pending_buffer_offset_y; break;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::title

char * gdk_wayland_surface_priv_get_title(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return ((struct _GdkWaylandSurface_v3_0_0*)self)->title;
    default: g_error("Invalid version ID"); g_abort();
  }
}

void gdk_wayland_surface_priv_set_title(GdkWaylandSurface * self, char * title) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: ((struct _GdkWaylandSurface_v3_0_0*)self)->title = title; break;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::application.was_set

gboolean gdk_wayland_surface_priv_get_application_was_set(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return ((struct _GdkWaylandSurface_v3_0_0*)self)->application.was_set;
    default: g_error("Invalid version ID"); g_abort();
  }
}

void gdk_wayland_surface_priv_set_application_was_set(GdkWaylandSurface * self, gboolean application_was_set) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: ((struct _GdkWaylandSurface_v3_0_0*)self)->application.was_set = application_was_set; break;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::application.application_id

char * gdk_wayland_surface_priv_get_application_application_id(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return ((struct _GdkWaylandSurface_v3_0_0*)self)->application.application_id;
    default: g_error("Invalid version ID"); g_abort();
  }
}

void gdk_wayland_surface_priv_set_application_application_id(GdkWaylandSurface * self, char * application_application_id) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: ((struct _GdkWaylandSurface_v3_0_0*)self)->application.application_id = application_application_id; break;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::application.app_menu_path

char * gdk_wayland_surface_priv_get_application_app_menu_path(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return ((struct _GdkWaylandSurface_v3_0_0*)self)->application.app_menu_path;
    default: g_error("Invalid version ID"); g_abort();
  }
}

void gdk_wayland_surface_priv_set_application_app_menu_path(GdkWaylandSurface * self, char * application_app_menu_path) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: ((struct _GdkWaylandSurface_v3_0_0*)self)->application.app_menu_path = application_app_menu_path; break;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::application.menubar_path

char * gdk_wayland_surface_priv_get_application_menubar_path(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return ((struct _GdkWaylandSurface_v3_0_0*)self)->application.menubar_path;
    default: g_error("Invalid version ID"); g_abort();
  }
}

void gdk_wayland_surface_priv_set_application_menubar_path(GdkWaylandSurface * self, char * application_menubar_path) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: ((struct _GdkWaylandSurface_v3_0_0*)self)->application.menubar_path = application_menubar_path; break;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::application.window_object_path

char * gdk_wayland_surface_priv_get_application_window_object_path(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return ((struct _GdkWaylandSurface_v3_0_0*)self)->application.window_object_path;
    default: g_error("Invalid version ID"); g_abort();
  }
}

void gdk_wayland_surface_priv_set_application_window_object_path(GdkWaylandSurface * self, char * application_window_object_path) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: ((struct _GdkWaylandSurface_v3_0_0*)self)->application.window_object_path = application_window_object_path; break;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::application.application_object_path

char * gdk_wayland_surface_priv_get_application_application_object_path(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return ((struct _GdkWaylandSurface_v3_0_0*)self)->application.application_object_path;
    default: g_error("Invalid version ID"); g_abort();
  }
}

void gdk_wayland_surface_priv_set_application_application_object_path(GdkWaylandSurface * self, char * application_application_object_path) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: ((struct _GdkWaylandSurface_v3_0_0*)self)->application.application_object_path = application_application_object_path; break;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::application.unique_bus_name

char * gdk_wayland_surface_priv_get_application_unique_bus_name(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return ((struct _GdkWaylandSurface_v3_0_0*)self)->application.unique_bus_name;
    default: g_error("Invalid version ID"); g_abort();
  }
}

void gdk_wayland_surface_priv_set_application_unique_bus_name(GdkWaylandSurface * self, char * application_unique_bus_name) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: ((struct _GdkWaylandSurface_v3_0_0*)self)->application.unique_bus_name = application_unique_bus_name; break;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::geometry_hints

GdkGeometry * gdk_wayland_surface_priv_get_geometry_hints_ptr(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return (GdkGeometry *)&((struct _GdkWaylandSurface_v3_0_0*)self)->geometry_hints;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::geometry_mask

GdkSurfaceHints * gdk_wayland_surface_priv_get_geometry_mask_ptr(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return (GdkSurfaceHints *)&((struct _GdkWaylandSurface_v3_0_0*)self)->geometry_mask;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::grab_input_seat

GdkSeat * gdk_wayland_surface_priv_get_grab_input_seat(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return ((struct _GdkWaylandSurface_v3_0_0*)self)->grab_input_seat;
    default: g_error("Invalid version ID"); g_abort();
  }
}

void gdk_wayland_surface_priv_set_grab_input_seat(GdkWaylandSurface * self, GdkSeat * grab_input_seat) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: ((struct _GdkWaylandSurface_v3_0_0*)self)->grab_input_seat = grab_input_seat; break;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::pending_frame_counter

gint64 * gdk_wayland_surface_priv_get_pending_frame_counter_ptr(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return (gint64 *)&((struct _GdkWaylandSurface_v3_0_0*)self)->pending_frame_counter;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::scale

guint32 * gdk_wayland_surface_priv_get_scale_ptr(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return (guint32 *)&((struct _GdkWaylandSurface_v3_0_0*)self)->scale;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::shadow_left

int gdk_wayland_surface_priv_get_shadow_left(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return ((struct _GdkWaylandSurface_v3_0_0*)self)->shadow_left;
    default: g_error("Invalid version ID"); g_abort();
  }
}

void gdk_wayland_surface_priv_set_shadow_left(GdkWaylandSurface * self, int shadow_left) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: ((struct _GdkWaylandSurface_v3_0_0*)self)->shadow_left = shadow_left; break;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::shadow_right

int gdk_wayland_surface_priv_get_shadow_right(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return ((struct _GdkWaylandSurface_v3_0_0*)self)->shadow_right;
    default: g_error("Invalid version ID"); g_abort();
  }
}

void gdk_wayland_surface_priv_set_shadow_right(GdkWaylandSurface * self, int shadow_right) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: ((struct _GdkWaylandSurface_v3_0_0*)self)->shadow_right = shadow_right; break;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::shadow_top

int gdk_wayland_surface_priv_get_shadow_top(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return ((struct _GdkWaylandSurface_v3_0_0*)self)->shadow_top;
    default: g_error("Invalid version ID"); g_abort();
  }
}

void gdk_wayland_surface_priv_set_shadow_top(GdkWaylandSurface * self, int shadow_top) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: ((struct _GdkWaylandSurface_v3_0_0*)self)->shadow_top = shadow_top; break;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::shadow_bottom

int gdk_wayland_surface_priv_get_shadow_bottom(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return ((struct _GdkWaylandSurface_v3_0_0*)self)->shadow_bottom;
    default: g_error("Invalid version ID"); g_abort();
  }
}

void gdk_wayland_surface_priv_set_shadow_bottom(GdkWaylandSurface * self, int shadow_bottom) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: ((struct _GdkWaylandSurface_v3_0_0*)self)->shadow_bottom = shadow_bottom; break;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::shadow_dirty

gboolean gdk_wayland_surface_priv_get_shadow_dirty(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return ((struct _GdkWaylandSurface_v3_0_0*)self)->shadow_dirty;
    default: g_error("Invalid version ID"); g_abort();
  }
}

void gdk_wayland_surface_priv_set_shadow_dirty(GdkWaylandSurface * self, gboolean shadow_dirty) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: ((struct _GdkWaylandSurface_v3_0_0*)self)->shadow_dirty = shadow_dirty; break;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::initial_fullscreen_output

struct wl_output * gdk_wayland_surface_priv_get_initial_fullscreen_output(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return ((struct _GdkWaylandSurface_v3_0_0*)self)->initial_fullscreen_output;
    default: g_error("Invalid version ID"); g_abort();
  }
}

void gdk_wayland_surface_priv_set_initial_fullscreen_output(GdkWaylandSurface * self, struct wl_output * initial_fullscreen_output) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: ((struct _GdkWaylandSurface_v3_0_0*)self)->initial_fullscreen_output = initial_fullscreen_output; break;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::opaque_region

cairo_region_t * gdk_wayland_surface_priv_get_opaque_region(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return ((struct _GdkWaylandSurface_v3_0_0*)self)->opaque_region;
    default: g_error("Invalid version ID"); g_abort();
  }
}

void gdk_wayland_surface_priv_set_opaque_region(GdkWaylandSurface * self, cairo_region_t * opaque_region) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: ((struct _GdkWaylandSurface_v3_0_0*)self)->opaque_region = opaque_region; break;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::opaque_region_dirty

gboolean gdk_wayland_surface_priv_get_opaque_region_dirty(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return ((struct _GdkWaylandSurface_v3_0_0*)self)->opaque_region_dirty;
    default: g_error("Invalid version ID"); g_abort();
  }
}

void gdk_wayland_surface_priv_set_opaque_region_dirty(GdkWaylandSurface * self, gboolean opaque_region_dirty) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: ((struct _GdkWaylandSurface_v3_0_0*)self)->opaque_region_dirty = opaque_region_dirty; break;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::input_region

cairo_region_t * gdk_wayland_surface_priv_get_input_region(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return ((struct _GdkWaylandSurface_v3_0_0*)self)->input_region;
    default: g_error("Invalid version ID"); g_abort();
  }
}

void gdk_wayland_surface_priv_set_input_region(GdkWaylandSurface * self, cairo_region_t * input_region) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: ((struct _GdkWaylandSurface_v3_0_0*)self)->input_region = input_region; break;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::input_region_dirty

gboolean gdk_wayland_surface_priv_get_input_region_dirty(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return ((struct _GdkWaylandSurface_v3_0_0*)self)->input_region_dirty;
    default: g_error("Invalid version ID"); g_abort();
  }
}

void gdk_wayland_surface_priv_set_input_region_dirty(GdkWaylandSurface * self, gboolean input_region_dirty) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: ((struct _GdkWaylandSurface_v3_0_0*)self)->input_region_dirty = input_region_dirty; break;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::last_sent_window_geometry

GdkRectangle * gdk_wayland_surface_priv_get_last_sent_window_geometry_ptr(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return (GdkRectangle *)&((struct _GdkWaylandSurface_v3_0_0*)self)->last_sent_window_geometry;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::last_sent_min_width

int gdk_wayland_surface_priv_get_last_sent_min_width(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return ((struct _GdkWaylandSurface_v3_0_0*)self)->last_sent_min_width;
    default: g_error("Invalid version ID"); g_abort();
  }
}

void gdk_wayland_surface_priv_set_last_sent_min_width(GdkWaylandSurface * self, int last_sent_min_width) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: ((struct _GdkWaylandSurface_v3_0_0*)self)->last_sent_min_width = last_sent_min_width; break;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::last_sent_min_height

int gdk_wayland_surface_priv_get_last_sent_min_height(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return ((struct _GdkWaylandSurface_v3_0_0*)self)->last_sent_min_height;
    default: g_error("Invalid version ID"); g_abort();
  }
}

void gdk_wayland_surface_priv_set_last_sent_min_height(GdkWaylandSurface * self, int last_sent_min_height) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: ((struct _GdkWaylandSurface_v3_0_0*)self)->last_sent_min_height = last_sent_min_height; break;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::last_sent_max_width

int gdk_wayland_surface_priv_get_last_sent_max_width(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return ((struct _GdkWaylandSurface_v3_0_0*)self)->last_sent_max_width;
    default: g_error("Invalid version ID"); g_abort();
  }
}

void gdk_wayland_surface_priv_set_last_sent_max_width(GdkWaylandSurface * self, int last_sent_max_width) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: ((struct _GdkWaylandSurface_v3_0_0*)self)->last_sent_max_width = last_sent_max_width; break;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::last_sent_max_height

int gdk_wayland_surface_priv_get_last_sent_max_height(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return ((struct _GdkWaylandSurface_v3_0_0*)self)->last_sent_max_height;
    default: g_error("Invalid version ID"); g_abort();
  }
}

void gdk_wayland_surface_priv_set_last_sent_max_height(GdkWaylandSurface * self, int last_sent_max_height) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: ((struct _GdkWaylandSurface_v3_0_0*)self)->last_sent_max_height = last_sent_max_height; break;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::saved_width

int gdk_wayland_surface_priv_get_saved_width(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return ((struct _GdkWaylandSurface_v3_0_0*)self)->saved_width;
    default: g_error("Invalid version ID"); g_abort();
  }
}

void gdk_wayland_surface_priv_set_saved_width(GdkWaylandSurface * self, int saved_width) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: ((struct _GdkWaylandSurface_v3_0_0*)self)->saved_width = saved_width; break;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::saved_height

int gdk_wayland_surface_priv_get_saved_height(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return ((struct _GdkWaylandSurface_v3_0_0*)self)->saved_height;
    default: g_error("Invalid version ID"); g_abort();
  }
}

void gdk_wayland_surface_priv_set_saved_height(GdkWaylandSurface * self, int saved_height) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: ((struct _GdkWaylandSurface_v3_0_0*)self)->saved_height = saved_height; break;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::parent_surface_committed_handler

gulong * gdk_wayland_surface_priv_get_parent_surface_committed_handler_ptr(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return (gulong *)&((struct _GdkWaylandSurface_v3_0_0*)self)->parent_surface_committed_handler;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::toplevel.layout

GdkToplevelLayout * gdk_wayland_surface_priv_get_toplevel_layout(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return ((struct _GdkWaylandSurface_v3_0_0*)self)->toplevel.layout;
    default: g_error("Invalid version ID"); g_abort();
  }
}

void gdk_wayland_surface_priv_set_toplevel_layout(GdkWaylandSurface * self, GdkToplevelLayout * toplevel_layout) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: ((struct _GdkWaylandSurface_v3_0_0*)self)->toplevel.layout = toplevel_layout; break;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::popup.layout

GdkPopupLayout * gdk_wayland_surface_priv_get_popup_layout(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return ((struct _GdkWaylandSurface_v3_0_0*)self)->popup.layout;
    default: g_error("Invalid version ID"); g_abort();
  }
}

void gdk_wayland_surface_priv_set_popup_layout(GdkWaylandSurface * self, GdkPopupLayout * popup_layout) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: ((struct _GdkWaylandSurface_v3_0_0*)self)->popup.layout = popup_layout; break;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::popup.unconstrained_width

int gdk_wayland_surface_priv_get_popup_unconstrained_width(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return ((struct _GdkWaylandSurface_v3_0_0*)self)->popup.unconstrained_width;
    default: g_error("Invalid version ID"); g_abort();
  }
}

void gdk_wayland_surface_priv_set_popup_unconstrained_width(GdkWaylandSurface * self, int popup_unconstrained_width) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: ((struct _GdkWaylandSurface_v3_0_0*)self)->popup.unconstrained_width = popup_unconstrained_width; break;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::popup.unconstrained_height

int gdk_wayland_surface_priv_get_popup_unconstrained_height(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return ((struct _GdkWaylandSurface_v3_0_0*)self)->popup.unconstrained_height;
    default: g_error("Invalid version ID"); g_abort();
  }
}

void gdk_wayland_surface_priv_set_popup_unconstrained_height(GdkWaylandSurface * self, int popup_unconstrained_height) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: ((struct _GdkWaylandSurface_v3_0_0*)self)->popup.unconstrained_height = popup_unconstrained_height; break;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::pending.toplevel.width

int gdk_wayland_surface_priv_get_pending_toplevel_width(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return ((struct _GdkWaylandSurface_v3_0_0*)self)->pending.toplevel.width;
    default: g_error("Invalid version ID"); g_abort();
  }
}

void gdk_wayland_surface_priv_set_pending_toplevel_width(GdkWaylandSurface * self, int pending_toplevel_width) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: ((struct _GdkWaylandSurface_v3_0_0*)self)->pending.toplevel.width = pending_toplevel_width; break;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::pending.toplevel.height

int gdk_wayland_surface_priv_get_pending_toplevel_height(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return ((struct _GdkWaylandSurface_v3_0_0*)self)->pending.toplevel.height;
    default: g_error("Invalid version ID"); g_abort();
  }
}

void gdk_wayland_surface_priv_set_pending_toplevel_height(GdkWaylandSurface * self, int pending_toplevel_height) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: ((struct _GdkWaylandSurface_v3_0_0*)self)->pending.toplevel.height = pending_toplevel_height; break;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::pending.toplevel.state

GdkToplevelState * gdk_wayland_surface_priv_get_pending_toplevel_state_ptr(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return (GdkToplevelState *)&((struct _GdkWaylandSurface_v3_0_0*)self)->pending.toplevel.state;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::pending.toplevel.is_resizing

gboolean gdk_wayland_surface_priv_get_pending_toplevel_is_resizing(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return ((struct _GdkWaylandSurface_v3_0_0*)self)->pending.toplevel.is_resizing;
    default: g_error("Invalid version ID"); g_abort();
  }
}

void gdk_wayland_surface_priv_set_pending_toplevel_is_resizing(GdkWaylandSurface * self, gboolean pending_toplevel_is_resizing) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: ((struct _GdkWaylandSurface_v3_0_0*)self)->pending.toplevel.is_resizing = pending_toplevel_is_resizing; break;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::pending.popup.x

int gdk_wayland_surface_priv_get_pending_popup_x(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return ((struct _GdkWaylandSurface_v3_0_0*)self)->pending.popup.x;
    default: g_error("Invalid version ID"); g_abort();
  }
}

void gdk_wayland_surface_priv_set_pending_popup_x(GdkWaylandSurface * self, int pending_popup_x) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: ((struct _GdkWaylandSurface_v3_0_0*)self)->pending.popup.x = pending_popup_x; break;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::pending.popup.y

int gdk_wayland_surface_priv_get_pending_popup_y(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return ((struct _GdkWaylandSurface_v3_0_0*)self)->pending.popup.y;
    default: g_error("Invalid version ID"); g_abort();
  }
}

void gdk_wayland_surface_priv_set_pending_popup_y(GdkWaylandSurface * self, int pending_popup_y) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: ((struct _GdkWaylandSurface_v3_0_0*)self)->pending.popup.y = pending_popup_y; break;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::pending.popup.width

int gdk_wayland_surface_priv_get_pending_popup_width(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return ((struct _GdkWaylandSurface_v3_0_0*)self)->pending.popup.width;
    default: g_error("Invalid version ID"); g_abort();
  }
}

void gdk_wayland_surface_priv_set_pending_popup_width(GdkWaylandSurface * self, int pending_popup_width) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: ((struct _GdkWaylandSurface_v3_0_0*)self)->pending.popup.width = pending_popup_width; break;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::pending.popup.height

int gdk_wayland_surface_priv_get_pending_popup_height(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return ((struct _GdkWaylandSurface_v3_0_0*)self)->pending.popup.height;
    default: g_error("Invalid version ID"); g_abort();
  }
}

void gdk_wayland_surface_priv_set_pending_popup_height(GdkWaylandSurface * self, int pending_popup_height) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: ((struct _GdkWaylandSurface_v3_0_0*)self)->pending.popup.height = pending_popup_height; break;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::pending.popup.repositioned_token

uint32_t gdk_wayland_surface_priv_get_pending_popup_repositioned_token(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return ((struct _GdkWaylandSurface_v3_0_0*)self)->pending.popup.repositioned_token;
    default: g_error("Invalid version ID"); g_abort();
  }
}

void gdk_wayland_surface_priv_set_pending_popup_repositioned_token(GdkWaylandSurface * self, uint32_t pending_popup_repositioned_token) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: ((struct _GdkWaylandSurface_v3_0_0*)self)->pending.popup.repositioned_token = pending_popup_repositioned_token; break;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::pending.popup.has_repositioned_token

gboolean gdk_wayland_surface_priv_get_pending_popup_has_repositioned_token(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return ((struct _GdkWaylandSurface_v3_0_0*)self)->pending.popup.has_repositioned_token;
    default: g_error("Invalid version ID"); g_abort();
  }
}

void gdk_wayland_surface_priv_set_pending_popup_has_repositioned_token(GdkWaylandSurface * self, gboolean pending_popup_has_repositioned_token) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: ((struct _GdkWaylandSurface_v3_0_0*)self)->pending.popup.has_repositioned_token = pending_popup_has_repositioned_token; break;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::pending.is_initial_configure

gboolean gdk_wayland_surface_priv_get_pending_is_initial_configure(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return ((struct _GdkWaylandSurface_v3_0_0*)self)->pending.is_initial_configure;
    default: g_error("Invalid version ID"); g_abort();
  }
}

void gdk_wayland_surface_priv_set_pending_is_initial_configure(GdkWaylandSurface * self, gboolean pending_is_initial_configure) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: ((struct _GdkWaylandSurface_v3_0_0*)self)->pending.is_initial_configure = pending_is_initial_configure; break;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::pending.serial

uint32_t gdk_wayland_surface_priv_get_pending_serial(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return ((struct _GdkWaylandSurface_v3_0_0*)self)->pending.serial;
    default: g_error("Invalid version ID"); g_abort();
  }
}

void gdk_wayland_surface_priv_set_pending_serial(GdkWaylandSurface * self, uint32_t pending_serial) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: ((struct _GdkWaylandSurface_v3_0_0*)self)->pending.serial = pending_serial; break;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::pending.is_dirty

gboolean gdk_wayland_surface_priv_get_pending_is_dirty(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return ((struct _GdkWaylandSurface_v3_0_0*)self)->pending.is_dirty;
    default: g_error("Invalid version ID"); g_abort();
  }
}

void gdk_wayland_surface_priv_set_pending_is_dirty(GdkWaylandSurface * self, gboolean pending_is_dirty) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: ((struct _GdkWaylandSurface_v3_0_0*)self)->pending.is_dirty = pending_is_dirty; break;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::initial_state.unset_flags

GdkToplevelState * gdk_wayland_surface_priv_get_initial_state_unset_flags_ptr(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return (GdkToplevelState *)&((struct _GdkWaylandSurface_v3_0_0*)self)->initial_state.unset_flags;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::initial_state.set_flags

GdkToplevelState * gdk_wayland_surface_priv_get_initial_state_set_flags_ptr(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return (GdkToplevelState *)&((struct _GdkWaylandSurface_v3_0_0*)self)->initial_state.set_flags;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::next_layout.toplevel.should_constrain

gboolean gdk_wayland_surface_priv_get_next_layout_toplevel_should_constrain(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return ((struct _GdkWaylandSurface_v3_0_0*)self)->next_layout.toplevel.should_constrain;
    default: g_error("Invalid version ID"); g_abort();
  }
}

void gdk_wayland_surface_priv_set_next_layout_toplevel_should_constrain(GdkWaylandSurface * self, gboolean next_layout_toplevel_should_constrain) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: ((struct _GdkWaylandSurface_v3_0_0*)self)->next_layout.toplevel.should_constrain = next_layout_toplevel_should_constrain; break;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::next_layout.toplevel.size_is_fixed

gboolean gdk_wayland_surface_priv_get_next_layout_toplevel_size_is_fixed(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return ((struct _GdkWaylandSurface_v3_0_0*)self)->next_layout.toplevel.size_is_fixed;
    default: g_error("Invalid version ID"); g_abort();
  }
}

void gdk_wayland_surface_priv_set_next_layout_toplevel_size_is_fixed(GdkWaylandSurface * self, gboolean next_layout_toplevel_size_is_fixed) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: ((struct _GdkWaylandSurface_v3_0_0*)self)->next_layout.toplevel.size_is_fixed = next_layout_toplevel_size_is_fixed; break;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::next_layout.popup.x

int gdk_wayland_surface_priv_get_next_layout_popup_x(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return ((struct _GdkWaylandSurface_v3_0_0*)self)->next_layout.popup.x;
    default: g_error("Invalid version ID"); g_abort();
  }
}

void gdk_wayland_surface_priv_set_next_layout_popup_x(GdkWaylandSurface * self, int next_layout_popup_x) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: ((struct _GdkWaylandSurface_v3_0_0*)self)->next_layout.popup.x = next_layout_popup_x; break;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::next_layout.popup.y

int gdk_wayland_surface_priv_get_next_layout_popup_y(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return ((struct _GdkWaylandSurface_v3_0_0*)self)->next_layout.popup.y;
    default: g_error("Invalid version ID"); g_abort();
  }
}

void gdk_wayland_surface_priv_set_next_layout_popup_y(GdkWaylandSurface * self, int next_layout_popup_y) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: ((struct _GdkWaylandSurface_v3_0_0*)self)->next_layout.popup.y = next_layout_popup_y; break;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::next_layout.configured_width

int gdk_wayland_surface_priv_get_next_layout_configured_width(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return ((struct _GdkWaylandSurface_v3_0_0*)self)->next_layout.configured_width;
    default: g_error("Invalid version ID"); g_abort();
  }
}

void gdk_wayland_surface_priv_set_next_layout_configured_width(GdkWaylandSurface * self, int next_layout_configured_width) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: ((struct _GdkWaylandSurface_v3_0_0*)self)->next_layout.configured_width = next_layout_configured_width; break;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::next_layout.configured_height

int gdk_wayland_surface_priv_get_next_layout_configured_height(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return ((struct _GdkWaylandSurface_v3_0_0*)self)->next_layout.configured_height;
    default: g_error("Invalid version ID"); g_abort();
  }
}

void gdk_wayland_surface_priv_set_next_layout_configured_height(GdkWaylandSurface * self, int next_layout_configured_height) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: ((struct _GdkWaylandSurface_v3_0_0*)self)->next_layout.configured_height = next_layout_configured_height; break;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::next_layout.surface_geometry_dirty

gboolean gdk_wayland_surface_priv_get_next_layout_surface_geometry_dirty(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return ((struct _GdkWaylandSurface_v3_0_0*)self)->next_layout.surface_geometry_dirty;
    default: g_error("Invalid version ID"); g_abort();
  }
}

void gdk_wayland_surface_priv_set_next_layout_surface_geometry_dirty(GdkWaylandSurface * self, gboolean next_layout_surface_geometry_dirty) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: ((struct _GdkWaylandSurface_v3_0_0*)self)->next_layout.surface_geometry_dirty = next_layout_surface_geometry_dirty; break;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::last_configure_serial

uint32_t gdk_wayland_surface_priv_get_last_configure_serial(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return ((struct _GdkWaylandSurface_v3_0_0*)self)->last_configure_serial;
    default: g_error("Invalid version ID"); g_abort();
  }
}

void gdk_wayland_surface_priv_set_last_configure_serial(GdkWaylandSurface * self, uint32_t last_configure_serial) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: ((struct _GdkWaylandSurface_v3_0_0*)self)->last_configure_serial = last_configure_serial; break;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::state_freeze_count

int gdk_wayland_surface_priv_get_state_freeze_count(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return ((struct _GdkWaylandSurface_v3_0_0*)self)->state_freeze_count;
    default: g_error("Invalid version ID"); g_abort();
  }
}

void gdk_wayland_surface_priv_set_state_freeze_count(GdkWaylandSurface * self, int state_freeze_count) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: ((struct _GdkWaylandSurface_v3_0_0*)self)->state_freeze_count = state_freeze_count; break;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::exported.callback

GdkWaylandToplevelExported * gdk_wayland_surface_priv_get_exported_callback_ptr(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return (GdkWaylandToplevelExported *)&((struct _GdkWaylandSurface_v3_0_0*)self)->exported.callback;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::exported.user_data

gpointer gdk_wayland_surface_priv_get_exported_user_data(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return ((struct _GdkWaylandSurface_v3_0_0*)self)->exported.user_data;
    default: g_error("Invalid version ID"); g_abort();
  }
}

void gdk_wayland_surface_priv_set_exported_user_data(GdkWaylandSurface * self, gpointer exported_user_data) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: ((struct _GdkWaylandSurface_v3_0_0*)self)->exported.user_data = exported_user_data; break;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::exported.destroy_func

GDestroyNotify * gdk_wayland_surface_priv_get_exported_destroy_func_ptr(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return (GDestroyNotify *)&((struct _GdkWaylandSurface_v3_0_0*)self)->exported.destroy_func;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::imported_transient_for

struct zxdg_imported_v1 * gdk_wayland_surface_priv_get_imported_transient_for(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return ((struct _GdkWaylandSurface_v3_0_0*)self)->imported_transient_for;
    default: g_error("Invalid version ID"); g_abort();
  }
}

void gdk_wayland_surface_priv_set_imported_transient_for(GdkWaylandSurface * self, struct zxdg_imported_v1 * imported_transient_for) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: ((struct _GdkWaylandSurface_v3_0_0*)self)->imported_transient_for = imported_transient_for; break;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::shortcuts_inhibitors

GHashTable * gdk_wayland_surface_priv_get_shortcuts_inhibitors(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return ((struct _GdkWaylandSurface_v3_0_0*)self)->shortcuts_inhibitors;
    default: g_error("Invalid version ID"); g_abort();
  }
}

void gdk_wayland_surface_priv_set_shortcuts_inhibitors(GdkWaylandSurface * self, GHashTable * shortcuts_inhibitors) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: ((struct _GdkWaylandSurface_v3_0_0*)self)->shortcuts_inhibitors = shortcuts_inhibitors; break;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::idle_inhibitor

struct zwp_idle_inhibitor_v1 * gdk_wayland_surface_priv_get_idle_inhibitor(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return ((struct _GdkWaylandSurface_v3_0_0*)self)->idle_inhibitor;
    default: g_error("Invalid version ID"); g_abort();
  }
}

void gdk_wayland_surface_priv_set_idle_inhibitor(GdkWaylandSurface * self, struct zwp_idle_inhibitor_v1 * idle_inhibitor) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: ((struct _GdkWaylandSurface_v3_0_0*)self)->idle_inhibitor = idle_inhibitor; break;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandSurface::idle_inhibitor_refcount

size_t * gdk_wayland_surface_priv_get_idle_inhibitor_refcount_ptr(GdkWaylandSurface * self) {
  switch (gdk_wayland_surface_priv_get_version_id()) {
    case 0: return (size_t *)&((struct _GdkWaylandSurface_v3_0_0*)self)->idle_inhibitor_refcount;
    default: g_error("Invalid version ID"); g_abort();
  }
}

#endif // GDK_WAYLAND_SURFACE_PRIV_H
