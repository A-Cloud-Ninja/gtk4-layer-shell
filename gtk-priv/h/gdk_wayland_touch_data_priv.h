/* AUTOGENERATED, DO NOT EDIT DIRECTLY
 * See gtk-priv/README.md for more information
 *
 * This file is part of gtk-layer-shell
 *
 * Copyright (C) 2009 Carlos Garnacho <carlosg@gnome.org>
 * Copyright Â© 2023 gtk-priv/scripts/code.py
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */

#ifndef GDK_WAYLAND_TOUCH_DATA_PRIV_H
#define GDK_WAYLAND_TOUCH_DATA_PRIV_H

#include "common.h"

typedef struct _GdkWaylandTouchData GdkWaylandTouchData;

// Version ID 0
// Valid for GTK master
struct _GdkWaylandTouchData_v3_0_0
{
  uint32_t id;
  double x;
  double y;
  GdkSurface *surface;
  uint32_t touch_down_serial;
  guint initial_touch : 1;
};

// For internal use only
int gdk_wayland_touch_data_priv_get_version_id() {
  static int version_id = -1;
  
  if (version_id == -1) {
    gtk_priv_assert_gtk_version_valid();
    int combo = gtk_get_minor_version() * 1000 + gtk_get_micro_version();
  
    switch (combo) {
        break;
  
      default:
        gtk_priv_warn_gtk_version_may_be_unsupported();
    }
  
    {
      version_id = 0;
    }
  }
  
  return version_id;
}

// GdkWaylandTouchData::id

uint32_t gdk_wayland_touch_data_priv_get_id(GdkWaylandTouchData * self) {
  switch (gdk_wayland_touch_data_priv_get_version_id()) {
    case 0: return ((struct _GdkWaylandTouchData_v3_0_0*)self)->id;
    default: g_error("Invalid version ID"); g_abort();
  }
}

void gdk_wayland_touch_data_priv_set_id(GdkWaylandTouchData * self, uint32_t id) {
  switch (gdk_wayland_touch_data_priv_get_version_id()) {
    case 0: ((struct _GdkWaylandTouchData_v3_0_0*)self)->id = id; break;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandTouchData::x

double gdk_wayland_touch_data_priv_get_x(GdkWaylandTouchData * self) {
  switch (gdk_wayland_touch_data_priv_get_version_id()) {
    case 0: return ((struct _GdkWaylandTouchData_v3_0_0*)self)->x;
    default: g_error("Invalid version ID"); g_abort();
  }
}

void gdk_wayland_touch_data_priv_set_x(GdkWaylandTouchData * self, double x) {
  switch (gdk_wayland_touch_data_priv_get_version_id()) {
    case 0: ((struct _GdkWaylandTouchData_v3_0_0*)self)->x = x; break;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandTouchData::y

double gdk_wayland_touch_data_priv_get_y(GdkWaylandTouchData * self) {
  switch (gdk_wayland_touch_data_priv_get_version_id()) {
    case 0: return ((struct _GdkWaylandTouchData_v3_0_0*)self)->y;
    default: g_error("Invalid version ID"); g_abort();
  }
}

void gdk_wayland_touch_data_priv_set_y(GdkWaylandTouchData * self, double y) {
  switch (gdk_wayland_touch_data_priv_get_version_id()) {
    case 0: ((struct _GdkWaylandTouchData_v3_0_0*)self)->y = y; break;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandTouchData::surface

GdkSurface * gdk_wayland_touch_data_priv_get_surface(GdkWaylandTouchData * self) {
  switch (gdk_wayland_touch_data_priv_get_version_id()) {
    case 0: return ((struct _GdkWaylandTouchData_v3_0_0*)self)->surface;
    default: g_error("Invalid version ID"); g_abort();
  }
}

void gdk_wayland_touch_data_priv_set_surface(GdkWaylandTouchData * self, GdkSurface * surface) {
  switch (gdk_wayland_touch_data_priv_get_version_id()) {
    case 0: ((struct _GdkWaylandTouchData_v3_0_0*)self)->surface = surface; break;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandTouchData::touch_down_serial

uint32_t gdk_wayland_touch_data_priv_get_touch_down_serial(GdkWaylandTouchData * self) {
  switch (gdk_wayland_touch_data_priv_get_version_id()) {
    case 0: return ((struct _GdkWaylandTouchData_v3_0_0*)self)->touch_down_serial;
    default: g_error("Invalid version ID"); g_abort();
  }
}

void gdk_wayland_touch_data_priv_set_touch_down_serial(GdkWaylandTouchData * self, uint32_t touch_down_serial) {
  switch (gdk_wayland_touch_data_priv_get_version_id()) {
    case 0: ((struct _GdkWaylandTouchData_v3_0_0*)self)->touch_down_serial = touch_down_serial; break;
    default: g_error("Invalid version ID"); g_abort();
  }
}

// GdkWaylandTouchData::initial_touch

guint gdk_wayland_touch_data_priv_get_initial_touch(GdkWaylandTouchData * self) {
  switch (gdk_wayland_touch_data_priv_get_version_id()) {
    case 0: return ((struct _GdkWaylandTouchData_v3_0_0*)self)->initial_touch;
    default: g_error("Invalid version ID"); g_abort();
  }
}

void gdk_wayland_touch_data_priv_set_initial_touch(GdkWaylandTouchData * self, guint initial_touch) {
  switch (gdk_wayland_touch_data_priv_get_version_id()) {
    case 0: ((struct _GdkWaylandTouchData_v3_0_0*)self)->initial_touch = initial_touch; break;
    default: g_error("Invalid version ID"); g_abort();
  }
}

#endif // GDK_WAYLAND_TOUCH_DATA_PRIV_H
